import unittest
from project.export_data.exportdata import ExportData
from project.signed_networks.definitions import definition_C1, args_for_definition_C, POSITIVE_LINK, NEGATIVE_LINK, NO_LINK, definition_C2, definition_D, args_for_definition_D, definition_A, args_for_definition_A
from project.signed_networks.structural_balance.metrics.edge import compute_fraction, compute_map, fraction_of_embedded_positive_signs
from project.signed_networks.structural_balance.metrics.network import table1, table2
from project.test.testutils import row_map, write_to_file
from project.util import memoize, std_dev
import tempfile


class ABC:
    @memoize
    def fibonacci(self, n):
        if n < 2: return n
        return self.fibonacci(n - 1) + self.fibonacci(n - 2)

    @memoize
    def square(self, n):
        return n * n


class TestFunctions(unittest.TestCase):
    def test_fibo(self):
        a = ABC()
        self.assertEqual(55, a.fibonacci(10))
        self.assertEqual(354224848179261915075, a.fibonacci(100))

    def test_exportdata_load_row(self):
        data = ExportData()
        data._load_row('USA', 'UK', row_map(y66=4345435))
        self.assertEquals(0, data.export_data(1965, 'USA', 'UK'))
        self.assertEquals(4345435, data.export_data(1966, 'USA', 'UK'))
        self.assertEquals(0, data.export_data(1965, 'UK', 'India'))
        self.assertEquals(-1, data.export_data(1965, 'UK', 'India', return_this_for_missing_datapoint=-1))


    def test_exportdata_load_file(self):
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',
            '"100000","World","117100","South Africa",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","World",130820766,144752269,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296')
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)
        self.assertEquals(0, d.export_data(1963, 'USA', 'South Africa'))
        self.assertEquals(1253225, d.export_data(1963, 'South Africa', 'World'))
        self.assertEquals(d.total_exports('South Africa', 1963), d.export_data(1963, 'South Africa', 'World'))

    def test_exportdata_get_exportdata(self):
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',
            '"100000","World","117100","South Africa",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","USA",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","World",130820766,144752269,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',
            '"218400","USA","117100","South Africa",251562,254890,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","South Africa","117100","USA",251562,254890,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342')
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)

        # basic test cases
        self.assertEquals(0, d.export_data(1963, 'USA', 'Japan'))
        self.assertEquals(0.20338726086696324, d.export_data_as_percentage(1963, 'USA', 'South Africa'))
        self.assertEquals(1253225, d.export_data(1963, 'South Africa', 'World'))
        self.assertEquals(d.total_exports('South Africa', 1963), d.export_data(1963, 'South Africa', 'World'))

        # A->B is missing
        self.assertEquals(0, d.export_data(1963, 'South Africa', 'India'))
        self.assertEquals(0, d.export_data_as_percentage(1963, 'South Africa', 'India'))
        self.assertEquals(-1, d.export_data(1963, 'South Africa', 'India', return_this_for_missing_datapoint=-1))
        #        To-do:make sure if this assertion should pass for an expected value of -10 too
        self.assertEquals(-1,
            d.export_data_as_percentage(1963, 'South Africa', 'India', return_this_for_missing_datapoint=-1))

        # A->B is NaN
        self.assertEquals(0, d.export_data(1964, 'South Africa', 'USA'))
        self.assertEquals(0, d.export_data_as_percentage(1964, 'South Africa', 'USA'))
        self.assertEquals(None, d.export_data(1964, 'South Africa', 'USA', return_none_if_data_point_is_nan=True))
        self.assertEquals(None,
            d.export_data_as_percentage(1964, 'South Africa', 'USA', return_none_if_data_point_is_nan=True))


    def test_exportdata_total_exports_between_C1_andC2(self):
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',
            '"100000","World","117100","South Africa",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","World",130820766,144752269,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',
            '"218400","USA","117100","South Africa",251562,254890,2545490,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"220600","Bermuda","141400","Cent.Afr.Rep",116,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN')
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)
        self.assertEquals(65948856, d.total_exports_from_C1_to_C2('South Africa', 'USA'))
        self.assertEquals(36, d.total_non_nan_points_from_C1_to_C2('South Africa', 'USA'))
        self.assertEquals(0, d.total_non_nan_points_from_C1_to_C2('Cent.Afr.Rep', 'Bermuda'))
        #        this test should pass?

    #        self.assertEquals(0, d.total_non_nan_points_from_C1_to_C2('Bermuda', 'Cent.Afr.Rep'))

    def test_exportdata_is_nan(self):
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',
            '"100000","World","117100","South Africa",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","World",130820766,144752269,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',
            '"218400","USA","117100","South Africa",251562,254890,2545490,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"220600","Bermuda","141400","Cent.Afr.Rep",116,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN')
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)
        self.assertFalse(d._is_nan(1963, 'South Africa', 'USA'))
        self.assertFalse(d._is_nan(1963, 'USA', 'South Africa'))
        self.assertFalse(d._trade_exists(1963, 'USA', 'South Africa'))

    def test_exportdata_trade_exists(self):
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',
            '"100000","World","117100","South Africa",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","World",130820766,144752269,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',
            '"218400","USA","117100","South Africa",251562,254890,2545490,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"220600","Bermuda","141400","Cent.Afr.Rep",116,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN')
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)
        self.assertTrue(d._trade_exists(1963, 'South Africa', 'USA'))
        self.assertTrue(d._trade_exists(1964, 'South Africa', 'USA'))
        self.assertFalse(d._trade_exists(1963, 'Japan', 'USA'))

    def test_definition_c1(self):
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',
            '"100000","World","117100","South Africa",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","USA",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","India",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","World",130820766,144752269,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',
            '"218400","USA","117100","South Africa",251562,254890,2545490,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","South Africa",251562,254890,2545490,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","India",251562,254890,2545490,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","USA",251562,NaN,225124,225124,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","South Africa","117100","USA",251562,254890,2545490,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"220600","Bermuda","141400","Cent.Afr.Rep",116,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN')
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)

        #        C1->C2 or C2->C1 does not exist
        self.assertEquals(NO_LINK, definition_C1(d, 1995, 'Cent.Afr.Rep', 'India', args_for_definition_C(1000, 0.01)))
        #        sum of exports from C1->C2 and C2->C1 is below threshold T1
        self.assertEquals(NO_LINK, definition_C1(d, 1995, 'Cent.Afr.Rep', 'Bermuda', args_for_definition_C(1000, 0.01)))
        #        sum of exports from C1->C2 and C2->C1 is above threshold but percentage of exports from one of C1->C2 and C2->C1 is Nan and is the first Nan
        self.assertEquals(NO_LINK, definition_C1(d, 1963, 'USA', 'India', args_for_definition_C(10, 0.01)))
        #        sum of exports from C1->C2 and C2->C1 is above threshold but percentage of exports from one of C1->C2 and C2->C1 is Nan and is not first Nan
        self.assertEquals(NEGATIVE_LINK, definition_C1(d, 1966, 'USA', 'India', args_for_definition_C(10, 0.01)))
        #        sum of exports from C1->C2 and C2->C1 is above threshold but percentage of exports from C1->C2 and C2->C1 is below T2
        self.assertEquals(NEGATIVE_LINK, definition_C1(d, 1995, 'South Africa', 'USA', args_for_definition_C(10, 1)))
        #        sum of exports from C1->C2 and C2->C1 is above threshold and percentage of exports from C1->C2 and C2->C1 is above T2
        self.assertEquals(POSITIVE_LINK,
            definition_C1(d, 1995, 'South Africa', 'USA', args_for_definition_C(1000, 0.01)))
        #        C1->C2 is positive, C2->C1 is missing
        self.assertEquals(NO_LINK, definition_C1(d, 1995, 'South Africa', 'India', args_for_definition_C(1000, 0.01)))

    def test_definition_c2(self):
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',
            '"100000","World","117100","South Africa",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","USA",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","India",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","World",130820766,144752269,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',
            '"218400","USA","117100","South Africa",251562,254890,2545490,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","South Africa",251562,254890,2545490,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","India",251562,254890,2545490,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","USA",251562,NaN,225124,225124,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","South Africa","117100","USA",251562,254890,2545490,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"220600","Bermuda","141400","Cent.Afr.Rep",116,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,250540,NaN,NaN,NaN,NaN,NaN,NaN,NaN,250540,NaN,NaN,NaN,NaN,NaN,NaN,250540,NaN,NaN,NaN,NaN,250540,NaN,NaN,NaN,NaN,250540,NaN,NaN,NaN')
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)

        #        C1->C2 or C2->C1 does not exist
        self.assertEquals(NO_LINK, definition_C2(d, 1995, 'Cent.Afr.Rep', 'India', args_for_definition_C(5, 0.01)))
        #        sum of exports from C1->C2 and C2->C1 is below threshold T1
        self.assertEquals(NO_LINK, definition_C2(d, 1995, 'Cent.Afr.Rep', 'Bermuda', args_for_definition_C(35, 0.01)))
        #        sum of exports from C1->C2 and C2->C1 is above threshold but percentage of exports from one of C1->C2 and C2->C1 is Nan and is the first Nan
        self.assertEquals(NO_LINK, definition_C2(d, 1963, 'USA', 'India', args_for_definition_C(10, 0.01)))
        #        sum of exports from C1->C2 and C2->C1 is above threshold but percentage of exports from one of C1->C2 and C2->C1 is Nan and is not first Nan
        self.assertEquals(NEGATIVE_LINK, definition_C2(d, 1966, 'USA', 'India', args_for_definition_C(10, 0.01)))
        #        sum of exports from C1->C2 and C2->C1 is above threshold but percentage of exports from C1->C2 and C2->C1 is below T2
        self.assertEquals(NEGATIVE_LINK, definition_C2(d, 1995, 'South Africa', 'USA', args_for_definition_C(10, 1)))
        #        sum of exports from C1->C2 and C2->C1 is above threshold and percentage of exports from C1->C2 and C2->C1 is above T2
        self.assertEquals(POSITIVE_LINK, definition_C2(d, 1995, 'South Africa', 'USA', args_for_definition_C(10, 0.01)))
        #        C1->C2 is positive, C2->C1 is missing
        self.assertEquals(NO_LINK, definition_C2(d, 1995, 'South Africa', 'India', args_for_definition_C(10, 0.01)))

    def test_definition_d(self):
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',
            '"100000","World","117100","USA",1137424,100,100,100,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","UK",1137424,100,100,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","Brazil",1137424,100,100,100,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","Australia",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","Bahrain",100,100,100,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"218400","Barbados","117100","Australia",251562,1,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","UK","117100","USA",251562,25,1,25,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","UK",251562,25,1,25,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Italy","117100","USA",251562,20,1,20,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","USA",251562,5,1,5,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","USA",251562,5,1,6,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Bahrain","117100","USA",251562,NaN,40,NaN,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","Bahrain",251562,100,100,100,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Armenia","117100","USA",251562,1,1,1,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Afghanistan","117100","USA",251562,1,1,1,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Pakistan","117100","USA",251562,1,1,1,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Bangladesh","117100","USA",251562,1,1,1,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Brazil","117100","USA",251562,1,40,1,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","Brazil",251562,80,99,1,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","UK","117100","Brazil",251562,20,1,20,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Belgium-Lux","117100","USA",251562,1,1,1,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"220600","Bermuda","141400","Cent.Afr.Rep",116,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,250540,NaN,NaN,NaN,NaN,NaN,NaN,NaN,250540,NaN,NaN,NaN,NaN,NaN,NaN,250540,NaN,NaN,NaN,NaN,250540,NaN,NaN,NaN,NaN,250540,NaN,NaN,NaN')
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)

        #        C1->C2 or C2->C1 does not exist
        self.assertEquals(NO_LINK, definition_D(d, 1995, 'Cent.Afr.Rep', 'India', args_for_definition_D(5)))
        #        C1->C2 and C2->C1 exports are in top T1 percentage of exports
        self.assertEquals(POSITIVE_LINK, definition_D(d, 1963, 'USA', 'UK', args_for_definition_D(30)))
        #        C1->C2 or C2->C1 exports are not in top T1 percentage of exports and there has been no positive year before
        self.assertEquals(NO_LINK, definition_D(d, 1963, 'USA', 'Brazil', args_for_definition_D(30)))
        #        C1->C2 or C2->C1 exports are not in top T1 percentage of exports(Nan) and there has been no positive year before
        self.assertEquals(NO_LINK, definition_D(d, 1963, 'USA', 'Bahrain', args_for_definition_D(30)))
        #        C1->C2 or C2->C1 exports are not in top T1 percentage of exports and there has been a positive year before
        self.assertEquals(NEGATIVE_LINK, definition_D(d, 1965, 'USA', 'Brazil', args_for_definition_D(30)))
        #        C1->C2 or C2->C1 exports are not in top T1 percentage of exports(Nan) and there has been a positive year before
        self.assertEquals(NEGATIVE_LINK, definition_D(d, 1965, 'USA', 'Bahrain', args_for_definition_D(30)))

    def test_exportdata_percentile(self):
        d = ExportData()
        self.assertEquals(100, d._calculate_export_percentile('A', []))
        self.assertEquals(0, d._calculate_export_percentile('A', [('A', 10), ('B', 5)]))
        self.assertEquals(10, d._calculate_export_percentile('B', [('A', 10), ('B', 5)]))
        self.assertEquals(10, d._calculate_export_percentile('B', [('A', 10), ('B', 5), ('C', 5), ('D', 5), ('E', 4)]))
        self.assertEquals(10, d._calculate_export_percentile('C', [('A', 10), ('B', 5), ('C', 5), ('D', 5), ('E', 4)]))
        self.assertEquals(10, d._calculate_export_percentile('D', [('A', 10), ('B', 5), ('C', 5), ('D', 5), ('E', 4)]))
        self.assertEquals(25, d._calculate_export_percentile('E', [('A', 10), ('B', 5), ('C', 5), ('D', 5), ('E', 4)]))
        self.assertEquals(100, d._calculate_export_percentile('non existing', [('A', 10), ('B', 5)]))
        pass

    def test_exportdata_top_T_percentage_exports(self):
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',
            '"100000","World","117100","USA",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","Greece",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","Ghana",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","Georgia",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","Australia",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"218400","Barbados","117100","Australia",251562,1,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","UK","117100","USA",251562,25,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Italy","117100","USA",251562,20,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","USA",251562,5,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","USA",251562,5,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Bahrain","117100","USA",251562,1,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Armenia","117100","USA",251562,1,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Afghanistan","117100","USA",251562,1,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Pakistan","117100","USA",251562,1,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Bangladesh","117100","USA",251562,1,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Brazil","117100","USA",251562,1,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Ghana","117100","Greece",251562,30,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Georgia","117100","Greece",251562,30,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Belgium-Lux","117100","USA",251562,1,NaN,225124,250540,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342')
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)
        self.assertEquals(str(
            [('UK', 25.0), ('Italy', 20.0), ('Canada', 5.0), ('India', 5.0), ('Armenia', 1.0), ('Afghanistan', 1.0),
             ('Belgium-Lux', 1.0), ('Pakistan', 1.0), ('Brazil', 1.0), ('Bahrain', 1.0), ('Bangladesh', 1.0)]),
            str(d.sorted_list_of_export_percentages('USA', 1963)))
        self.assertEquals(0, d.export_data_as_percentile(1963, 'USA', 'UK'))
        self.assertEquals(25.0, d.export_data_as_percentile(1963, 'USA', 'Italy'))
        self.assertEquals(55.0, d.export_data_as_percentile(1963, 'USA', 'Armenia'))
        self.assertEquals(55.0, d.export_data_as_percentile(1963, 'USA', 'Afghanistan'))
        self.assertEquals(55.0, d.export_data_as_percentile(1963, 'USA', 'Bangladesh'))
        self.assertEquals(100.0, d.export_data_as_percentile(1963, 'USA', 'Spain'))
        self.assertEquals(100.0, d.export_data_as_percentile(1964, 'USA', 'UK'))
        self.assertEquals(str(
            [('UK', 25.0), ('Italy', 20.0), ('Canada', 5.0), ('India', 5.0), ('Armenia', 1.0), ('Afghanistan', 1.0),
             ('Belgium-Lux', 1.0), ('Pakistan', 1.0), ('Brazil', 1.0), ('Bahrain', 1.0), ('Bangladesh', 1.0),
             ('Ghana', 0.0), ('Australia', 0.0), ('Georgia', 0.0), ('Greece', 0.0), ('Barbados', 0.0)]),
            str(d.countries_sorted_by_export_percentages('USA', 1963)))
        self.assertEquals(str(['UK', 'Italy', 'Canada', 'India']), str(d.top_T_percent_exports('USA', 1963, 50)))
        self.assertEquals(str(
            ['UK', 'Italy', 'Canada', 'India', 'Armenia', 'Afghanistan', 'Belgium-Lux', 'Pakistan', 'Brazil', 'Bahrain',
             'Bangladesh']), str(d.top_T_percent_exports('USA', 1963, 56)))
        self.assertEquals(str(['Ghana', 'Georgia']), str(d.top_T_percent_exports('Greece', 1963, 40)))
        self.assertEquals(
            str(['UK', 'Italy', 'Canada', 'India', 'Armenia', 'Afghanistan', 'Belgium-Lux', 'Pakistan', 'Brazil',
                 'Bahrain', 'Bangladesh']),
            str(d.top_T_percent_exports('USA', 1963, 100)))


    def test_exportdata_pick_top_T(self):
        d = ExportData()
        self.assertEquals(['UK'], d._pick_top_T([('UK', 25)], 1))
        self.assertEquals(['UK'], d._pick_top_T([('UK', 25)], 100))
        self.assertEquals(['UK', 'UK'], d._pick_top_T([('UK', 25), ('UK', 20), ('UK', 15), ('UK', 10), ], 30))
        self.assertEquals(['A', 'B', 'C', 'D', 'E', 'F'],
            d._pick_top_T([('A', 25), ('B', 20), ('C', 15), ('D', 15), ('E', 15), ('F', 15), ('G', 14), ], 50))


    def test_exportdata_first_trade_year(self):
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',
            '"100000","World","117100","South Africa",1137424,1253225,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","World",130820766,144752269,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',
            '"218400","USA","117100","South Africa",251562,NaN,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"220600","Bermuda","141400","Cent.Afr.Rep",116,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,589594')
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)
        self.assertEquals(1967, d.first_trade_year('South Africa', 'USA'))
        self.assertEquals(2000, d.first_trade_year('Cent.Afr.Rep', 'Bermuda'))

    def test_paper_table1(self):
        incomplete_graph = tempfile.NamedTemporaryFile()
        complete_graph = tempfile.NamedTemporaryFile()
        write_to_file(incomplete_graph,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',

            '"100000","World","117100","UK",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","India",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","Japan",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","USA",130820766,100,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',
            '"100000","World","100000","Canada",130820766,100,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',

            '"218400","UK","117100","USA",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","USA",251562,4,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","USA",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","Canada",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","Canada",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","Canada",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","USA","117100","UK",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","UK",251562,4,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Japan","117100","UK",251562,4,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","UK",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Japan","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","Japan",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","Japan",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
        )
        write_to_file(complete_graph,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',

            '"100000","World","117100","UK",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","India",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","Japan",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","USA",130820766,100,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',
            '"100000","World","100000","Canada",130820766,100,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',

            '"218400","UK","117100","USA",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","USA",251562,4,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","USA",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Japan","117100","USA",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","Canada",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","Canada",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Japan","117100","Canada",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","Canada",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","USA","117100","UK",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","UK",251562,4,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Japan","117100","UK",251562,4,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","UK",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Japan","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","Japan",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","Japan",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","Japan",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","Japan",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
        )
        d1 = ExportData()
        d2 = ExportData()
        d1.load_file(incomplete_graph.name, should_read_world_datapoints=True)
        d2.load_file(complete_graph.name, should_read_world_datapoints=True)
        incomplege_graph_map = table1(d1, 1963, test_extension_def_A, args_for_definition_A(.5, 2))
        complege_graph_map = table1(d2, 1963, test_extension_def_A, args_for_definition_A(.5, 2))
        self.assertEquals(5, incomplege_graph_map['Nodes'])
        self.assertEquals(8, incomplege_graph_map['Edges'])
        self.assertEquals(5.0 / 8 * 100, incomplege_graph_map['+ edges'])
        self.assertEquals(3.0 / 8 * 100, incomplege_graph_map['- edges'])
        self.assertEquals(5, incomplege_graph_map['Traids'])

        self.assertEquals(5, complege_graph_map['Nodes'])
        self.assertEquals(10, complege_graph_map['Edges'])
        self.assertEquals(7.0 / 10 * 100, complege_graph_map['+ edges'])
        self.assertEquals(3.0 / 10 * 100, complege_graph_map['- edges'])
        self.assertEquals(10, complege_graph_map['Traids'])

    def test_paper_table1(self):
        pass
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',

            '"100000","World","117100","UK",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","India",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","Japan",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","USA",130820766,100,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',
            '"100000","World","100000","Canada",130820766,100,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',

            '"218400","UK","117100","USA",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","USA",251562,4,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","USA",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","Canada",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","Canada",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","Canada",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","USA","117100","UK",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","UK",251562,4,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Japan","117100","UK",251562,4,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","UK",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Japan","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","Japan",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","Japan",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
        )
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)
        map = table2(d, 1963, test_extension_def_A, args_for_definition_A(.5, 2))

        self.assertEquals(0, map['T0']['|Ti|'])
        self.assertEquals(2, map['T1']['|Ti|'])
        self.assertEquals(2, map['T2']['|Ti|'])
        self.assertEquals(1, map['T3']['|Ti|'])

        self.assertEquals(0, map['T0']['p(Ti)'])
        self.assertEquals(2.0 / 5, map['T1']['p(Ti)'])
        self.assertEquals(2.0 / 5, map['T2']['p(Ti)'])
        self.assertEquals(1.0 / 5, map['T3']['p(Ti)'])

    def test_std_dev(self):
        self.assertEquals(None, std_dev([]))
        self.assertEquals("1.414", "%.3f" % std_dev([1, 2, 3, 4, 5]))
        self.assertEquals("0.816", "%.3f" % std_dev([1, 2, 3]))
        self.assertEquals("0.000", "%.3f" % std_dev([1, 1, 1]))
        self.assertEquals("1.118", "%.3f" % std_dev([1, 2, 3, 4]))
        self.assertEquals("2.693", "%.3f" % std_dev([1, 2, 3, -4]))

    def test_embeddedness_compute_fraction(self):
        map = {
            0: (4, 4),
            1: (1, 3),
            2: (1, 3),
            3: (2, 1),
            4: (2, 2),
            5: (2, 2),
            6: (1, 2),
            7: (1, 5),
            8: (0, 3),
        }
        ret_map = compute_fraction(map)
        self.assertEquals(0.5, ret_map[0])
        self.assertEquals(0.75, ret_map[1])
        self.assertEquals(0.75, ret_map[2])
        self.assertEquals(1.0 / 3, ret_map[3])
        self.assertEquals(0.5, ret_map[4])
        self.assertEquals(0.5, ret_map[5])
        self.assertEquals(2.0 / 3, ret_map[6])
        self.assertEquals(5.0 / 6, ret_map[7])
        self.assertEquals(1, ret_map[8])

    def test_fraction_of_embedded_positive_signs(self):
        f = tempfile.NamedTemporaryFile()
        write_to_file(f,
            'ICode,Importer,ECode,Exporter,Value62,Value63,Value64,Value65,Value66,Value67,Value68,Value69,Value70,Value71,Value72,Value73,Value74,Value75,Value76,Value77,Value78,Value79,Value80,Value81,Value82,Value83,Value84,Value85,Value86,Value87,Value88,Value89,Value90,Value91,Value92,Value93,Value94,Value95,Value96,Value97,Value98,Value99,Value00',

            '"100000","World","117100","UK",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","India",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","117100","Japan",1137424,100,1315703,1453614,1719904,1934726,2073399,2172388,2067276,2087840,2197399,3035278,4473097,5151976,5786599,7168917,8039418,10691282,12774748,31497500,9593869,8498300,27745267,11587906,12944273,12142881,14767609,15973854,16353354,16153549,30129310,27374820,30949042,33215626,28668008,35065432,30622443,31679773,38330367',
            '"100000","World","100000","USA",130820766,100,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',
            '"100000","World","100000","Canada",130820766,100,163401432,178619568,196373987,206306598,229438483,261773445,301725595,336632436,394429429,547697681,822593098,860894299,967082574,1080137888,1187499282,1588616996,1927615343,1908925277,1753041348,1650817500,1875030686,1949413915.813,2097956459,2454677596,2798583134,3044659532,3471060661,3600841444,3860180402,3796916610,4305600574,5136222078,5475815227,5631902195,5575802767,5791258924,6568385296',

            '"218400","UK","117100","USA",251562,55,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","UK",251562,55,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","Canada",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","UK",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","India","117100","USA",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","USA","117100","India",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","India",251562,55,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","India","117100","UK",251562,55,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","India","117100","Canada",251562,55,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Canada","117100","India",251562,55,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

            '"218400","UK","117100","Japan",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',
            '"218400","Japan","117100","UK",251562,45,NaN,NaN,NaN,228294,255674,247306,290816,287973,NaN,NaN,657842,926241,1013444,1336176,2538904,2798597,3562230,2754026,2120687,2157953,2651509,2218343,2503722,1436099,1633206,1664480,1861072,1879078,1906935,2037416,2274562,2438873,2586155,2838329,3389674,3530854,4646342',

        )
        d = ExportData()
        d.load_file(f.name, should_read_world_datapoints=True)
        map = compute_map(d, 1963, test_extension_def, {})
        self.assertEquals((1, 0), map[0])
        self.assertEquals((2, 2), map[1])
        self.assertEquals((0, 1), map[2])

        fractions = fraction_of_embedded_positive_signs(d, 1963, test_extension_def, {})
        self.assertEquals(0, fractions[0])
        self.assertEquals(.5, fractions[1])
        self.assertEquals(1, fractions[2])


@memoize
def test_extension_def(data, year, country_A, country_B, args):
    one_way_export = data.export_data(year, country_A, country_B, True, None)
    other_way_export = data.export_data(year, country_B, country_A, True, None)
    if None in [one_way_export, other_way_export]: return NO_LINK
    if one_way_export > 50 and other_way_export > 50: return POSITIVE_LINK
    return NEGATIVE_LINK


@memoize
def test_extension_def_A(data, year, country_A, country_B, args):
    one_way_export = data.export_data(year, country_A, country_B, True, None)
    other_way_export = data.export_data(year, country_B, country_A, True, None)
    if None in [one_way_export, other_way_export]: return NO_LINK
    else:
        return definition_A(data, year, country_A, country_B, args)
